package com.ajie.wechat.util;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.pentaho.di.core.KettleEnvironment;
import org.pentaho.di.core.exception.KettleException;
import org.pentaho.di.job.Job;
import org.pentaho.di.job.JobMeta;
import org.pentaho.di.trans.Trans;
import org.pentaho.di.trans.TransMeta;

import com.ajie.wechat.controller.JtContractIntegrateController;

public class KettleUtil {
	
	private final static Log logger = LogFactory.getLog(JtContractIntegrateController.class);
	
	public static void main(String[] args) {
//		String jobpath = "D:\\kettle\\scjy_data_syc\\syncContract_add\\sg\\sg_dataintegrate.kjb";
//		try {
//			runJob(jobpath, "jtcontractid","1727");
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		String[] strs = {};
//		try {
//			runTrans("D:\\kettle\\scjy_data_syc\\syncContract_add\\sg\\sg_save_result_analysis.ktr",strs);
//		} catch (KettleException e) {
//			e.printStackTrace();
//		}

		
//		try {
//			Map<String, String> paramap = new HashMap<String, String>();
//			paramap.put("jtcontractid", "1901");
//			runTrans("D:\\kettle\\scjy_data_syc\\syncContract_add\\contract_query\\jt_contract.ktr",paramap);
//		} catch (KettleException e) {
//			e.printStackTrace();
//		}
	}
	
	public static void runJob(String jobname,Map<String,String> paramap) throws Exception{
		KettleEnvironment.init();
		// jobname 是Job脚本的路径及名称
		JobMeta jobMeta = new JobMeta(jobname, null);
		Job job = new Job(null, jobMeta);
		//访问服务端的ip和post
		String strIpHost = getPropertiesByName("serverhost.properties","middleserviceurl");
		if(!paramap.isEmpty()){
			for(Map.Entry<String, String> entry : paramap.entrySet()){
				System.out.println(entry.getKey()+"---"+entry.getValue());
				// 向Job 脚本传递参数，脚本中获取参数值：${参数名}
				job.setVariable(entry.getKey(), entry.getValue());				
			}
		}
		job.setVariable("ippost",strIpHost);
		job.start();
		job.waitUntilFinished();
		if (job.getErrors() > 0) {
			logger.error(job.getStackTrace());
			throw new Exception("There are errors during job exception!(执行job发生异常)");
		}  
	}
	
	public static void runTrans(String transFileName,Map<String,String> paramap) throws KettleException{
		// 初始化  
		KettleEnvironment.init();  
	    // 转换元对象  
	    TransMeta transMeta = new TransMeta(transFileName);  
	    // 转换  
	    Trans trans = new Trans(transMeta);
		//访问服务端的ip和post
		String strIpHost = getPropertiesByName("serverhost.properties","middleserviceurl");
	    if(!paramap.isEmpty()){
	    	Iterator<Map.Entry<String, String>> ite = paramap.entrySet().iterator();
			while(!ite.hasNext()){
				Map.Entry<String, String> entry = ite.next();
				trans.setVariable(entry.getKey(), entry.getValue());
			}
	    }		
	    trans.setVariable("ippost", strIpHost);
//	    String[] params = {"1483"}; // 传递参数  
	    // 执行转换  
	    trans.execute(null);  
	    // 等待转换执行结束  
	    trans.waitUntilFinished(); 
	}
	
	/**
	 * 获取配置文件属性值
	 * @param profile	配置文件相对路径,根目录为classpath
	 * @param proname	要获取的属性值
	 * @return
	 */
	public static String getPropertiesByName(String profile,String proname){
		Properties pro = new Properties();
        try{
            //适用于propersties文件必须在classpath目录下的文件
            InputStream in = KettleUtil.class.getClassLoader().getResourceAsStream(profile);
            pro.load(in);
        }catch(Exception e){
            e.printStackTrace();
        }
        String resultstr = pro.getProperty(proname);
        return resultstr;
	}
	public static String getDate(){
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		return dateFormat.format(new Date());
	}
}
